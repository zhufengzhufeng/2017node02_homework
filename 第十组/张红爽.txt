第一周 git && node基础
20170520
    git使用
        1.版本控制
            1.1 备份文件
            1.2 记录历史
            1.3 回到过去
            1.4 多端共享
            1.5 团队协作
        2.什么是git
            分布式版本控制系统
                每个版本都是最完整的（会将各个版本进行合并存放）
                存放在github上
                git lab管理平台
                    所有的内容都存到.git下
            集中式版本控制系统
                中央服务器 ---- 存放所有代码（1.0,2.0,3.0）,每个版本之间完全不同
                集中存放代码
                    存储文件：每一个文件夹下都有.svn的文件

        3.git使用
            cmd中操作
            查看是否配置文件
                git config --list
            配置文件
                用户名
                    git config --global user.name zhs1990
                邮箱
                    git config --global user.email  529954781@qq.com

        4.git基础操作
            创建目录
                mkdir 目录名称
            进入目录
                cd 目录名称(tab自动补全)
            创建目录并进入目录
                mkdir node-zhs && cs node-zhs
            初始化git仓库(在最外层目录进行该操作)
                git init
            查看目录
                ls
                ls -al  查看全部文件(包含隐藏文件)
            清屏
                clear
            创建文件
                touch 文件名称.文件后缀名
            查看文件内容
                cat 文件名称.文件后缀名
            编辑文件内容
                vi  文件名称.文件后缀名
                    默认是不可编辑模式，
                        i键切换编辑
                        esc+:wq 保存并退出
                        :!q  强制退出
            查看git状态
                git status  每次提交前操作
                    红色表示没有在暂存区中
                    绿色表示已经在暂存区中

            加入暂存区
                git add 文件名
                git add -A  全部
                git add . 所有的文件

            加入历史区
                git commit -m

            查看历史
                git log
                git log--online   只显示在一行内
                git reflog  查看所有版本

            查看每个区的文件不同点
                工作区-暂存区
                    git diff
                暂存区-历史区
                    git diff --cached
                工作区-历史区
                    git diff master

            暂存区 - 工作区  从暂存区中覆盖掉工作区
                git checkout 文件名
            历史区 - 工作区   选择某个版本进行回滚操作
                git reset --hard 版本号    硬回滚

            删除上一次添加暂存区的内容
                git reset HEAD 文件名

            提交的文件可以一步到位
                git commit -a -m''
            sourceTree

        5.git提交
            工作区 ->
                git add 文件名
            暂存区/缓存区/过渡区 ->
                git commit -m
            历史区
                git log  查看
            git hub
                展示的是历史区的内容（默认展示最新的版本）


        6.webstorm最新破解版
            http://idea.iteblog.com/key.php

        webstrom操作提交步骤
        创建.gitignore必须在add之前
        忽略文件包含.idea node_modules

        7.git分支
            查看分支
                git branch
            添加分支
                git branch 分支名
            切换分支
                git checkout 分支名
            删除分支
                git branch -D 分支名
            创建分支并切换到新的分支
                git checkout -b 分支名
            合并分支
                1,fast-forword
                    主干没有任何更新
                    分支提交了新的代码
                        git merge 分支名 （前提是必须切换到主干master）
                    将主干的指针指向分支最新
                2,conflict
                    合并多个分支时，可能合并的内容会产生冲突
                    手动解决冲突，提交最新结果


            关于分支注意：
                创建的分支和master一样的，不是父子级关系
                    master是主干，必须先存在主干才能添加分支（提交后会生成主干master）
                将内容提交到某个分支上
                    默认代码会放在工作区上，不属于任何分支，只有提交到某个分支上，此文件才归属于特定的分支
                    在谁的分支上进行提交，就属于当前的分支


    提交到远程仓库
        1,建立文件
            创建有内容的文件
                        echo "# 201702node" > README.md
            README.md
            .gitignore
        2,提交到历史区
            git add
            git commit -m "信息"
        3,
            git remote -v  查看所有的远程仓库
            git remote add origin 远程仓库地址  origin 地址的别名
            git push origin master  将主干文件推送到远程仓库地址
        4,拉取最新代码
            git pull origin master  拉取获取最新代码

    本地代码和线上代码版本不一致
        1,线上比线下的版本新
        2,线上和线下两个版本都不一致

        merge conflict  发生冲突   ---- 手动解决冲突
        git pull ....  before pushing again   在推送代码之前请先拉取代码

    部署git静态网页
        将网页通过git网址访问 （只能放静态页，不能放置server）
            第一步：
                需要一个特定的分支  ----- gh-pages
                    git checkout -b gh-pages
                将代码提交到这个分支上
                    git add
                    git commit -m''
                确保建立远程和本地的连接
                    git remote add 别名 远程仓库地址
                推送到github上,将gh-pages这个分支提交上去
                    git push origin gh-pages
                在github中的setting上可以找到这个网址
    fork
        叉子，将别人的代码当前的状态，克隆一份到自己的仓库上，一个项目只能fork一次，我的代码更新不会导致你的更新
    clone   是将线上的项目拉取到本地，拉下来后就是git仓库，而且已经添加好了远程仓库地址
        git clone 远程仓库地址 文件夹名称
    操作git必须在根目录下

    组长提交信息
        1,git clone 自己的项目地址
            git add
            git commit -m''
            git push origin master

        new pull request    发送合并请求
            create pull request

作业
    代码合并请求管理提交的笔记

    先更新再提交
        git pull  -> git push


    组员
        git clone
        git add
        git commit
        git remote add leader 组长地址（仅一次即可）
        git pull leader master
        git push origin master

    组员fork组长的地址，发送合并请求，组长同意


配置环境变量
    node可以在命令行下执行的原因
        将可执行文件配置到环境变量下


    什么是node?
        服务端运行的js的环境，服务端语言
    
    前端的模块化
        闭包
        单例：有且只有一份
            缺点：不能完全解决命名冲突,调用时代码过长  var obj = {};
        require.js  AMD  依赖前置    sea.js  CMD 就近依赖
        conmmonjs   规范，是node模块的实现 modules.exports

    node 特点
        异步I/O  定时器 回调函数 事件 ajax
        单线程（其他语言java,php多线程）
            多线程实现：切换执行上下文，速度感觉不出来，好像在干很多件事情
        进程
            进程是包含线程的，node一个进程，只能开一个线程

    事件环
        靠事件驱动的

    node全局对象

第二周 http fs...

第三周 express cookie  session

第四周 mongodb + 博客项目

第五周 聊天室+爬虫

第六周 实战项目