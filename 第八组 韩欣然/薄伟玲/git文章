<!DOCTYPE html><html><head><title>git</title><meta charset='utf-8'><link href='https://dn-maxiang.qbox.me/res-min/themes/marxico.css' rel='stylesheet'><style></style></head><body><div id='preview-contents' class='note-content'>
                        
                    



<h5 id="git">git</h5>



<h5 id="dos命令行">dos命令行</h5>



<pre class="prettyprint hljs-dark"><code class="hljs vim"><br><span class="hljs-number">1</span>：ipconfig 查看本机的ip信息<br><span class="hljs-number">2</span>：ipconfig /<span class="hljs-keyword">all</span> 查看本机ip信息<br><span class="hljs-number">3</span>：cls 清屏<br><span class="hljs-number">4</span>：<span class="hljs-keyword">exit</span> 退出<br><span class="hljs-number">5</span>：D:  直接进入指定磁盘目录<br><span class="hljs-number">6</span>：dir 查看当前位置下的所有目录文件<br><span class="hljs-number">7</span>：<span class="hljs-keyword">cd</span> 文件夹名字(不要是中文)   进入到指定的文件夹<br><span class="hljs-number">8</span>：<span class="hljs-keyword">cd</span> ../ 返回上级目录<br><span class="hljs-number">9</span>：<span class="hljs-keyword">cd</span> ./ 返回当前目录<br><span class="hljs-number">10</span>：<span class="hljs-keyword">cd</span> / 返回根目录<br><span class="hljs-number">11</span>：<span class="hljs-keyword">ls</span> -<span class="hljs-keyword">al</span>查看所有文件<br><span class="hljs-number">12</span>:<span class="hljs-keyword">echo</span> 编辑文件内容 <br>写法（<span class="hljs-keyword">echo</span> 编辑的内容 &gt;<span class="hljs-built_in">index</span>.txt）<br>（<span class="hljs-keyword">echo</span> 编辑的内容 &gt;&gt;<span class="hljs-built_in">index</span>.txt）一个大于是写入 两个大于号是追加内容<br><span class="hljs-number">15</span>：<span class="hljs-keyword">cat</span> 查看這个文件的里面的内容<br><span class="hljs-number">16</span>：rm -rf 文件名  删除文件名<br><span class="hljs-number">17</span>：<span class="hljs-keyword">vi</span> 文件名 调出<span class="hljs-keyword">vim</span>编辑器<br>{ <br>   &gt; i:编辑内容<br>  &gt; esc+冒号 ：编辑<span class="hljs-keyword">wq</span>保存退出<br>  &gt; i/<span class="hljs-keyword">o</span>/<span class="hljs-keyword">u</span> 任意一个进入插入编辑状态<br>  &gt;  esc退出编辑状态  <br>  &gt;  shift+: 进入插入编辑     <br>  &gt;  q不保存并退出 <br>  &gt;  q!强制退出<br>  &gt;   <span class="hljs-keyword">wq</span>保存并退出<br>}<br><br><br></code></pre>



<h5 id="git-命令">git 命令</h5>

<blockquote>
  <p>工作区 —&gt; 暂存区/缓存区/过渡区—&gt;历史区–&gt;github 展示的是历史区的内容</p>
</blockquote>



<pre class="prettyprint hljs-dark"><code class="hljs bash">&gt; git --version;查看git的版本，知道git安装是否成功<br>&gt; <br>1：git config --list 查看是否配置了git（会在最后两行提示用户名 邮箱）<br><br>2：git配置  git <span class="hljs-built_in">log</span> 查看配置<br>git config --global user.name <span class="hljs-string">''</span>你的用户名<span class="hljs-string">''</span><br>git config --global user.email <span class="hljs-string">''</span>你的邮箱<span class="hljs-string">''</span><br><br>3：mkdir 目录名字  创建目录名字<br>4：mkdir <span class="hljs-built_in">test</span>-git &amp;&amp; <span class="hljs-built_in">cd</span> <span class="hljs-built_in">test</span>-git （即创建目录又进入）创建文件名 并且进入這个文件<br>5：git init 初始化一个git仓库<br>6：touch （文件名） 新建文件<br>7: git status 查看git状态<br> &gt; 红色表示没有在暂存区中<br> &gt; 绿色表示已经在暂存区<br><br>8：把本地仓库所有内容推送到远程仓库<br>（1）git add .（.代表所有文件 也可以代表所有文件）（工作区到暂存区）<br>（2）git commit -m<span class="hljs-string">'注释内容'</span>（暂存区加到历史区）（注释内容是为什么要提交）<br>（3）git push origin master<br>9：&gt; git <span class="hljs-built_in">log</span> 日志(查看历史)<br>   &gt; git <span class="hljs-built_in">log</span> -- oneline 查看版本号的前7位数还有注释内容<br>10：<br>&gt; git diff  工作区跟暂存区比较<br>&gt; git diff --cached 暂存区与历史区比较<br>&gt; git diff master 工作区跟历史比较<br>11：<br>&gt; git checkout +(文件名)  暂存区中覆盖工作区<br>&gt; git reset --hard id  id是版本号 选择某个版本进行回滚操作<br>12：创建gitignore必须在add之前创建<br>$ touch .gitignore 创建一个文件<br>$ <span class="hljs-built_in">echo</span> .DS_Store<br>$ <span class="hljs-built_in">echo</span> node_modules<br>$ <span class="hljs-built_in">echo</span> .idea<br>13：git reset HEAD . 删除上一次添加暂存区的内容<br>14：git reflog 查看所有历史版本<br><br></code></pre>



<h5 id="分支">分支</h5>



<pre class="prettyprint hljs-dark"><code class="hljs stylus"><span class="hljs-number">1</span>：git branch 查看分支<br><span class="hljs-number">2</span>：git branch +分支名   创建分支<br>创建的分支和master一样<br><span class="hljs-number">3</span>：git checkout +分支名  切换分支<br><span class="hljs-number">4</span>：git branch -D+分支名  删除分支<br><span class="hljs-number">5</span>：git checkout -<span class="hljs-selector-tag">b</span> +分支名   创建并切换分支<br><span class="hljs-number">6</span>：将内容提交到某个分支上，默认我们的代码放在工作区上，不属于任何分支，只有提交到某个分支上，此文件才属于特定的分支<br><span class="hljs-number">7</span>：fast-forward <br><span class="hljs-number">8</span>:git merge +分支名  合并分支名<br><span class="hljs-number">9</span>：支持提交过的文件（一步提交）git commit -<span class="hljs-selector-tag">a</span> -m <span class="hljs-string">'注释内容'</span><br><br><span class="hljs-number">10</span>：conflict 合并多个分支时，可能合并的内容会产生冲突，手动解决<br> &gt; <span class="hljs-number">1</span>: 创建分支 并且切换git checkout -<span class="hljs-selector-tag">b</span> +分支名   创建并切换分支<br> &gt; <span class="hljs-number">2</span>：vi index<span class="hljs-selector-class">.js</span> 修改内容<br> &gt; <span class="hljs-number">3</span>：提交 git commit -<span class="hljs-selector-tag">a</span> -m <span class="hljs-string">'注释内容'</span><br> &gt; <span class="hljs-number">4</span>：合并 git merge +分支名  合并分支名<br> &gt; <span class="hljs-number">5</span>: 手动删除修改 （index.js里面的箭头》》》》还有heade之类的文字）<br> &gt; <span class="hljs-number">6</span>：cat index.js查看<br> &gt; <span class="hljs-number">7</span>：git commit -<span class="hljs-selector-tag">a</span> -m <span class="hljs-string">'注释内容'</span> 再次提交<br><span class="hljs-number">11</span>：git pull origin master 获取最新代码<br><br></code></pre>



<h5 id="远程提交">远程提交</h5>



<pre class="prettyprint hljs-dark"><code class="hljs stylus"><span class="hljs-number">1</span>：线上有，把线上的拉下来，在提交代码<br><span class="hljs-number">2</span>：线上没有，直接提交上去<br><span class="hljs-number">1</span>：echo <span class="hljs-string">"# 2017.05.20"</span> &gt; README<span class="hljs-selector-class">.md</span> （创建README.md文件 ）；<br><span class="hljs-number">2</span>：git init  初始化仓库<br><span class="hljs-number">3</span>:touch <span class="hljs-selector-class">.gitignore</span>  <br><span class="hljs-number">4</span>:vi <span class="hljs-selector-class">.gitignore</span>  编辑或略的文件<br><span class="hljs-number">5</span>：git add . 提交到暂存区<br><span class="hljs-number">6</span>: git commit -m 提交到历史区<br><span class="hljs-number">7</span>:git remote -v 查看远程仓库<br><span class="hljs-number">8</span>：git remote add origin https:<span class="hljs-comment">//github.com/boweiling/2017.05.20.git </span><br> &gt; origin  代表地址origin ：https:<span class="hljs-comment">//github.com/boweiling/2017.05.20.git </span><br><span class="hljs-number">9</span>:git push origin master 把分支提交上去 <br></code></pre>



<pre class="prettyprint hljs-dark"><code class="hljs markdown"><span class="hljs-quote">&gt; 线上比线下版本新</span><br><span class="hljs-quote">&gt; 线上线下两个版本不一样</span><br></code></pre>



<h5 id="部署git静态网页">部署git静态网页</h5>



<pre class="prettyprint hljs-dark"><code class="hljs markdown"><span class="hljs-quote">&gt; 1:将网页通过git网址访问（只能放静态页，不能放置server）</span><br><span class="hljs-quote">&gt; 第一步：</span><br>  &gt; ：需要一个特定的分支 （gh-pages）<br> git checkout -b +分支名   创建并切换分支<br> &gt; ：将代码提交到這个分支上 <br> git add .  git commit -m" git push origin gh-pages<br><span class="hljs-quote">&gt;  &gt; ：在git hup中的setting上找到這个网址</span><br><span class="hljs-quote">&gt; </span><br></code></pre>



<h4 id="fork">fork</h4>



<pre class="prettyprint hljs-dark"><code class="hljs markdown"><span class="hljs-quote">&gt; 叉子 ，将别人的代码当前的状态，克隆一份放在自己的仓库上，一个项目只能fork一次，我的代码不会更新</span><br><span class="hljs-quote">&gt; </span><br></code></pre>

<p>组长提交信息</p>



<pre class="prettyprint hljs-dark"><code class="hljs crmsh"><br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">自己的项目地址<br>添加内容<br>git</span> add .<br>git commit -m 'team xxx'<br>git push origin <span class="hljs-keyword">master</span><br><span class="hljs-title">组员给提交给自己<br><br>git</span> <span class="hljs-keyword">clone</span> <span class="hljs-title">自己的项目地址<br>添加内容<br>git</span> add .<br>git commit -m 'team xxx'<br>git remote add leader 组长的地址（建立一次即可）<br>git pull leader <span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> push origin <span class="hljs-keyword">master</span><br><span class="hljs-title">组长再次提交给老师<br><br>将自己的内容放进去<br>git</span> add .<br>git commit -m 'team xxx'<br>git remote add teacher https://github.com/zhufengzhufeng/<span class="hljs-number">2017</span>node02_homework<br>git pull teacher <span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> push origin <span class="hljs-literal">master</span><br></code></pre></div></body></html>